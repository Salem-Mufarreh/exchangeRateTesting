Index: src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\nspring.datasource.url=jdbc:mysql://localhost:3306/exchangerates?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC\r\nspring.datasource.username=root\r\nspring.datasource.password=root\r\n# hibernate properties\r\nspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect\r\nspring.datasource.driver-class-name=\r\n\r\nspring.jpa.hibernate.ddl-auto=update\r\nspring.jpa.show-sql=true
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/main/resources/application.properties b/src/main/resources/application.properties
--- a/src/main/resources/application.properties	
+++ b/src/main/resources/application.properties	
@@ -7,4 +7,6 @@
 spring.datasource.driver-class-name=
 
 spring.jpa.hibernate.ddl-auto=update
-spring.jpa.show-sql=true
\ No newline at end of file
+spring.jpa.show-sql=true
+spring.thymeleaf.prefix=classpath:/templates/
+spring.thymeleaf.suffix=.html
\ No newline at end of file
Index: src/main/java/QA/Project/Controller/CurrencyController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package QA.Project.Controller;\r\n\r\nimport QA.Project.Entity.CurrencyEntity;\r\nimport QA.Project.Service.CurrencyService;\r\nimport jakarta.validation.Valid;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport java.util.List;\r\n\r\n@RestController\r\n@RequestMapping(\"/api/currency\")\r\npublic class CurrencyController {\r\n    private final CurrencyService _CurrencyService;\r\n\r\n    public CurrencyController(CurrencyService currencyService) {\r\n        _CurrencyService = currencyService;\r\n    }\r\n\r\n    @PostMapping(\"/\")\r\n    public ResponseEntity<CurrencyEntity> AddCurrency(@Valid @RequestBody CurrencyEntity currency){\r\n        if(currency!= null){\r\n            CurrencyEntity entity = _CurrencyService.addCurrency(currency);\r\n            System.out.println(entity.toString());\r\n            return new ResponseEntity(entity, HttpStatus.OK);\r\n        }\r\n        return new ResponseEntity<>(HttpStatus.NOT_FOUND);\r\n    }\r\n    @GetMapping(\"/{id}\")\r\n    public ResponseEntity<CurrencyEntity> getCurrency(@PathVariable Long id){\r\n        return new ResponseEntity<>(_CurrencyService.getCurrency(id),HttpStatus.OK);\r\n    }\r\n    @DeleteMapping(\"/{id}\")\r\n    public ResponseEntity deleteCurrency(@PathVariable Long id){\r\n        _CurrencyService.removeCurrency(id);\r\n        return new ResponseEntity(HttpStatus.OK);\r\n    }\r\n    @GetMapping(\"/\")\r\n    public ResponseEntity<List<CurrencyEntity>> getAllRates(){\r\n        List<CurrencyEntity> list = _CurrencyService.getAllRates();\r\n        return new ResponseEntity<>(list,HttpStatus.OK);\r\n    }\r\n    @GetMapping(\"/convert\")\r\n    public ResponseEntity<Double> convertCurrency(@RequestParam(\"source\") String sourceCurrency,\r\n                                                  @RequestParam(\"target\") String targetCurrency,\r\n                                                  @RequestParam(name = \"amount\", required = false) Double amount ) {\r\n\r\n        // Logic to convert the currency\r\n        Double rate = _CurrencyService.convertCurrency(sourceCurrency,targetCurrency);;\r\n        // Retrieve the conversion rate based on source and target currencies\r\n\r\n        // Calculate the converted amount\r\n        Double convertedAmount =rate;\r\n        if(amount != null) {\r\n            convertedAmount= rate * amount;\r\n        }\r\n\r\n        // Return the converted amount\r\n        return ResponseEntity.ok(convertedAmount);\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/QA/Project/Controller/CurrencyController.java b/src/main/java/QA/Project/Controller/CurrencyController.java
--- a/src/main/java/QA/Project/Controller/CurrencyController.java	
+++ b/src/main/java/QA/Project/Controller/CurrencyController.java	
@@ -18,6 +18,10 @@
         _CurrencyService = currencyService;
     }
 
+    @GetMapping("/gui")
+    public String showHomePage() {
+        return "index.html"; // Replace "index.html" with the actual name of your HTML file
+    }
     @PostMapping("/")
     public ResponseEntity<CurrencyEntity> AddCurrency(@Valid @RequestBody CurrencyEntity currency){
         if(currency!= null){
Index: build/resources/main/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\nspring.datasource.url=jdbc:mysql://localhost:3306/exchangerates?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC\r\nspring.datasource.username=root\r\nspring.datasource.password=root\r\n# hibernate properties\r\nspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect\r\nspring.datasource.driver-class-name=\r\n\r\nspring.jpa.hibernate.ddl-auto=update\r\nspring.jpa.show-sql=true
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/build/resources/main/application.properties b/build/resources/main/application.properties
--- a/build/resources/main/application.properties	
+++ b/build/resources/main/application.properties	
@@ -7,4 +7,6 @@
 spring.datasource.driver-class-name=
 
 spring.jpa.hibernate.ddl-auto=update
-spring.jpa.show-sql=true
\ No newline at end of file
+spring.jpa.show-sql=true
+spring.thymeleaf.prefix=classpath:/templates/
+spring.thymeleaf.suffix=.html
\ No newline at end of file
